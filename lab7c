#include "msp430.h"          // .cdecls C,"msp430.h"
#include "morse.h"

/*
 * main.c
 */
extern int main_asm(void);
extern char* letters[];
extern char* numbers[];
extern void initialize();
extern void doSpace();
extern void doDot();
extern void doDash();
extern void interSpace();;
extern int beep_cnt;
extern int delay_cnt;
extern int second_cnt;
extern int beep_bool;
extern int debounce_cnt;

void outputChar(char*);

int main(void)
{
	initialize();
									//    ; start main function vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	WDTCTL = WDT_CTL;				//    main_asm:   mov.w   #WDT_CTL,&WDTCTL        ; set WD timer interval
	IE1 = WDTIE;					//                mov.b   #WDTIE,&IE1             ; enable WDT interrupt
	beep_cnt = 0;			    //                clr.w   &beep_cnt               ; clear counters
	delay_cnt = 0;			    //                clr.w   &delay_cnt
	second_cnt = WDT_IPS;			//                mov.w   #WDT_IPS, &second_cnt
	beep_bool = 1;					//                mov.w   #1, &beep_bool
//									//
	while(1)						//    loop:       mov.w   #message, r4
	{  	char c;
		char* mptr = MESSAGE;
		while(c = *mptr++)		    //    loop2:      mov.b   @r4+,r5
		{
			    if (c == ' ') doSpace();				//    			cmp.b   #32, r5
									//    			  jeq   loop6
									//    			cmp.b   #58, r5
									//    			  jl    number
									//
			    else if (isalpha(c)) outputChar(letters[toupper(c) - 'A']);					//    letter:	    sub.w   #'A',r5
									//    			add.w   r5,r5
									//      			mov.w   letters(r5),r5
									//                jmp     loop3
									//
									//    number:     sub.w   #'0',r5
									//    			add.w   r5,r5
				else if (isdigit(c)) outputChar(numbers[c - '0']);					//                mov.w   numbers(r5),r5									//
		}
	}
	return 0;
}
void outputChar(char* charPtr)
{   char* dotOrDashPtr = charPtr;
	char dotOrDashChar;
	while (dotOrDashChar = *dotOrDashPtr++)					//    loop3:      mov.b   @r5+,r6
	{
		if (dotOrDashChar == DOT)    //                cmp.b   #DOT,r6
		{doDot();}				    //                  jeq   loop4
		else if (dotOrDashChar == DASH)//             cmp.b   #DASH, r6
		{doDash();}				    //                  jeq   loop5
	}
	 								//                cmp.b   #END, r6
	interSpace();					//                  jeq   loop7
}									//                jmp     loop
//    ; end main function ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#pragma vector=PORT1_VECTOR
__interrupt void Port_1_ISR(void)
{
   P1IFG &= ~0x0f;        //   P1_ISR:     bic.b  #0x01,&P1IFG             ; clear P1.0 Interrupt Flag
   debounce_cnt = DEBOUNCE;   //   mov.w  #DEBOUNCE,debounce_cnt  ; reset debounce count
   return;                //   reti
}					//
